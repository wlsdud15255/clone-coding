* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background-color: black;
}

.container {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);

  /* 
  1-1. perspective 
  */
  perspective: 1000px;
}

.flip-btn {
  width: 200px;
  height: 100px;
  color: white;
  text-align: center;
  line-height: 100px;
  /* 
  ※상위 태그의 효과를 적용받는 원칙을 이용해서 
  하위 태그인 프론트, 벡 글자를 상위 클래스에서 한번에 적용시켜 글자색과 위치 조절


  ※ 글자 수직 중앙 정렬
  해당 컨텐츠(글자)의 요소 height 값이 line-height 값과 동일하면 수직 중앙 정렬 된다.

   한줄 텍스트일 경우에만 가능
  보통 중앙정렬 공식으로 외워도 무관 => text-align:center, line-height
   */

  /* 

  1. 2D요소를 3요소로 변환
  2D인 HTML 요소를 3D로 변환하게 해주는 css 기능이 있다.

  1-1. 해당 컨텐츠를 포함하는 가장 큰 요소에 원근감을 주는 perspectiv를 적용
  1-2. 회전할 요소(하위 요소에 회전되는 객체가있는)에 3D 형태를 잡아주는 transform-style:preserve-3d 적용
  1-3. 각각의 축을 생각하여 transform 속성의 translate, rotate를 이용하여 배치
  ※ 각 설명에 번호가 있으니 찾아 보기

  1-2. transform-style
  flat을 기본 값으로 하지만 preserve-3d 값을 통해 하위 태그들을 3D요소로 활용할 수 있다.
  */
  transform-style: preserve-3d;

  /*
   2. transition
    transition : 변화되는 효과에 시간을 부여한다.
    만약, hover 태그에 적용시키면, front에서 back으로 가는건 돌아가지만 
    마우스를 벗어나면 회전이 아닌 그냥 front로 돌아온다!!!
  */
  transition: 0.5s;
  cursor: pointer;
}

.flip-btn:hover {
  transform: rotateX(-45deg);
}

.front {
  background-color: goldenrod;
  height: 100px;

  /* 

  ★ 1-3. 
  
  2차원에서 back 모형의 높이를 100px로 준 후 3차원으로 눕히면 50px이 앞과 뒤로 튀어나오는 형태이다.

  이를 맞춰주기 위해 front 박스를 모니터 방향(z축 방향)으로 이동시켜줘야 한다
  => 원래는 Y축이겠지만 rotate 속성을 이용해 돌아가면 축도 함께 돌아가 z축 방향으로 앞으로 이동
  */
  transform: translateZ(50px);
}

.back {
  background-color: darkgoldenrod;
  height: 100px;

  /* 

  1-3. 3D 요소로 변환했을 시 화면으로 보이는 쪽에 z축이 형성된다.
  요소 회전시 축도 같이 움직임

  transform: rotateX(90deg);     x축을 기준으로 회전
  transform: translateZ           z축으로 이동
  => rotateX를 이용하여 회전했을 때 Z축이 함께 이동하여 기존의 Y축이 있던 곳으로 간다
   */
  transform: rotateX(90deg) translateZ(150px);
}
